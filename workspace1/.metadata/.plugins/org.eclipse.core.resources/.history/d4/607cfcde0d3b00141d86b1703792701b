
public class DivideConquerApproach {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}
	
	
	
	private int countInversions(int[] A, int from, int to){
		
		int mid=(to-from)/2;
		
		int leftInversions= 0;
		int rightInversions = 0;
		int splitInversions = 0;
		
		if(A.length>1){
		leftInversions= countInversions(A,from,mid);
		rightInversions = countInversions(A,mid+1,to);
		splitInversions = countSplitInversions(A,from,to);
		}
		return leftInversions+rightInversions+splitInversions;
		
	}



	private int countSplitInversions(int[] A, int from, int to) {
		
		int mid=(to-from)/2;
		int count=0;

		
		Integer[] left = new Integer[mid-from+1+1];
		for(int i=0; i<mid-from+1; i++){
			left[i]=A[i+from];
		}
		
		left[mid-from+1]=Integer.MAX_VALUE;
		
		Integer[] right = new Integer[to-mid+1];
		for(int i=0; i<to-mid; i++){
			right[i]=A[i+mid+1];
		}
		right[to-mid]=Integer.MAX_VALUE;
		
		int i=0;
		int j=0;
		int z=from;
		while(i<(mid-from+1)||(j<(to-mid))){
			if(left[i]<right[j]){
				A[z]=left[i];
				i++;
			}
			else{
				A[z]=right[j];
				j++;
				count++;
			}
			z++;
		}
		
		return count;
	}

}
